apiVersion: v1
kind: Namespace
metadata:
  name: node-feature-discovery
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nfd-ccd-labeller
  namespace: node-feature-discovery
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nfd-ccd-labeller
rules:
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nfd-ccd-labeller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nfd-ccd-labeller
subjects:
  - kind: ServiceAccount
    name: nfd-ccd-labeller
    namespace: node-feature-discovery
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nfd-ccd-labeller
  namespace: node-feature-discovery
  labels:
    app: nfd-ccd-labeller
spec:
  selector:
    matchLabels:
      app: nfd-ccd-labeller
  template:
    metadata:
      labels:
        app: nfd-ccd-labeller
    spec:
      serviceAccountName: nfd-ccd-labeller
      hostPID: true
      hostNetwork: true
      tolerations:
        - operator: Exists
      containers:
        - name: ccd-labeller
          image: public.ecr.aws/amazonlinux/amazonlinux:2
          securityContext:
            privileged: true
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "[INFO] Detecting CCD/L3 cache groups..."
              yum install -y hwloc lscpu jq curl >/dev/null 2>&1 || true

              # Try hwloc-ls first (most accurate)
              CCDS=$(hwloc-ls --no-io --no-bridges | grep "L3" | wc -l)
              if [ "$CCDS" -eq 0 ]; then
                CCDS=$(lscpu -e | awk '{print $7}' | grep -v "L3" | sort -u | wc -l)
              fi
              echo "[INFO] Found $CCDS CCD/L3 groups"

              HOSTNAME=$(cat /etc/hostname)
              API="https://kubernetes.default.svc"
              TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              CACERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"

              for ((i=0;i<CCDS;i++)); do
                LABEL="custom.io/ccd-group-$i=true"
                echo "[INFO] Labeling node $HOSTNAME with $LABEL"
                curl -s --cacert $CACERT -H "Authorization: Bearer $TOKEN" \
                  -X PATCH \
                  -H "Content-Type: application/merge-patch+json" \
                  $API/api/v1/nodes/$HOSTNAME \
                  -d "{\"metadata\":{\"labels\":{\"custom.io/ccd-group-$i\":\"true\"}}}"
              done

              echo "[INFO] Done labeling node with CCD groups."
              sleep infinity
          volumeMounts:
            - name: host-sys
              mountPath: /host-sys
              readOnly: true
            - name: ca-certs
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
      volumes:
        - name: host-sys
          hostPath:
            path: /sys
        - name: ca-certs
          projected:
            sources:
              - serviceAccountToken:
                  path: token
                  expirationSeconds: 3600
